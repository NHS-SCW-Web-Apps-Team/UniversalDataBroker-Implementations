<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/16/2022 1:31:15 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="0DF-01079"
  DTS:CreatorName="SCW\Daniel.Forrester"
  DTS:DTSID="{7F2199A4-0FED-4BD3-859F-C9AA76808057}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="2057"
  DTS:ObjectName="Execute UDB Workflow"
  DTS:PackageType="5"
  DTS:VersionBuild="69"
  DTS:VersionGUID="{E44E5494-2FD1-4BC3-B4C5-D65945AD4013}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{014FD79B-608F-47E3-8A2C-528A91E57B2D}"
      DTS:ObjectName="ClientId"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{943B1FA7-FE50-4AED-868E-645232404B1D}"
      DTS:ObjectName="Client_Secret"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{27385F69-29F0-4849-B895-A60221E39266}"
      DTS:ObjectName="FilePath"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{BF2767A4-1D10-424E-BB95-BCB4B6D26492}"
      DTS:ObjectName="OrganisationID"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{C196EC92-300B-4612-BAD1-46002D651CFC}"
      DTS:ObjectName="Resource"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{C3A94A82-E798-45AC-9ABF-CED1C1E5BCCC}"
      DTS:ObjectName="Url"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{3887F8A6-BB3B-4D68-BAE4-FBE835A93321}"
      DTS:ObjectName="WorkflowID"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{CFC917D5-24CA-4A4A-B32D-F11809D34E27}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_27d127eb28024801868919e2de9cf94e"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Package::Client_Secret,$Package::ClientId,$Package::FilePath,$Package::OrganisationID,$Package::Resource,$Package::Url,$Package::WorkflowID">
          <ProjectItem
            Name="UDB.ExecuteSync.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.IO;

namespace Nhs.Scwcsu.UDB.Execute
{
    public class ExecuteSync
    {
        private static HttpClient _client;

        public static string Execute(string workflowid, string filePath, string OrganisationId, string url, string clientId, string clientSecret, string resource)
        {
            if (string.IsNullOrWhiteSpace(workflowid))
            {
                throw new InvalidOperationException("No workflowId provided");
            }
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new InvalidOperationException("No filepath provided");
            }
            if (string.IsNullOrWhiteSpace(OrganisationId))
            {
                throw new InvalidOperationException("No organisationId provided");
            }
            if (string.IsNullOrWhiteSpace(url))
            {
                throw new InvalidOperationException("No url provided");
            }
            if (string.IsNullOrWhiteSpace(clientId))
            {
                throw new InvalidOperationException("No clientId provided");
            }
            if (string.IsNullOrWhiteSpace(clientSecret))
            {
                throw new InvalidOperationException("No clientSecret provided");
            }
            if (string.IsNullOrWhiteSpace(resource))
            {
                throw new InvalidOperationException("No resource provided");
            }
            _client = new HttpClient();
            var token = AcquireToken(resource, clientId, clientSecret);
            return UploadFile(filePath, workflowid, OrganisationId, token, url);
        }

        private static string UploadFile(string filePath, string workflowId, string OrganisationId, string token, string url)
        {
            _client.DefaultRequestHeaders.Clear();
            var content = new MultipartFormDataContent();
            var fileName = Path.GetFileName(filePath);
            var reqContent = new StreamContent(new FileStream(filePath, FileMode.Open));
            var contentType = "";
            var Extension = fileName.Substring(fileName.LastIndexOf('.') + 1);
            switch (Extension)
            {
                case "csv":
                    contentType = "text/csv";
                    break;
                case "xls":
                    contentType = "application/vnd.ms-excel";
                    break;
                case "json":
                    contentType = "application/json";
                    break;
                case "zip":
                    contentType = "application/zip";
                    break;
                default:
                    contentType = "application/octet-stream";
                    break;
            }
            reqContent.Headers.ContentType = new MediaTypeHeaderValue(contentType);
            content.Add(reqContent, fileName, fileName);
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = _client.PostAsync($"{url}/api/files/upload/{OrganisationId}/{workflowId}", content).GetAwaiter().GetResult();
            if (response.IsSuccessStatusCode)
            {
                var respContent = response.Content;
                return respContent.ReadAsStringAsync().GetAwaiter().GetResult();
            }
            else
            {
                return $"Error posting file {response.Content.ReadAsStringAsync().GetAwaiter().GetResult()}";
            }
        }

        private static string AcquireToken(string url, string clientId, string clientSecret)
        {
            try
            {
                var content = new FormUrlEncodedContent(
                    new List<KeyValuePair<string, string>>()
                    {
                        new KeyValuePair<string, string>(
                            "grant_type", "client_credentials"
                        ),
                        new KeyValuePair<string, string>(
                            "client_id", clientId
                        ),
                        new KeyValuePair<string, string>(
                            "client_secret", clientSecret
                        ),
                        new KeyValuePair<string, string>(
                            "resource", url
                        )
                    }
                );

                content.Headers.Clear();
                content.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
                _client.DefaultRequestHeaders.Clear();
                var response = _client.PostAsync(new Uri("https://login.microsoftonline.com/4088bef3-a7fb-4b63-b87b-4d8eda09b28d/oauth2/token?"), content).GetAwaiter().GetResult();
                if (response.IsSuccessStatusCode)
                {
                    var json = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();
                    string _token = json.Substring(json.IndexOf("access_token") + 15);
                    var token = _token.Substring(0, _token.IndexOf("\""));
                    return token;
                }
                else
                {
                    throw new Exception($"Unabable to get a token: {response.ReasonPhrase}");
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_27d127eb28024801868919e2de9cf94e.Properties.Settings.get_Default():ST_27d127eb28024801868919e2de9cf94e.Properties.Sett" +
    "ings")]

namespace ST_27d127eb28024801868919e2de9cf94e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_27d127eb28024801868919e2de9cf94e.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7688939C-80D1-47B7-A873-8B6A2F4B3C08}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_27d127eb28024801868919e2de9cf94e</RootNamespace>
    <AssemblyName>ST_27d127eb28024801868919e2de9cf94e</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="UDB.Execute.cs" />
    <Compile Include="UDB.ExecuteSync.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

#endregion

namespace ST_27d127eb28024801868919e2de9cf94e
{

    using Nhs.Scwcsu.UDB.Execute;
    //using System.Threading.Tasks;

    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>


        //public async Task Main()
        public void Main()
        {
            try
            {
                string WorkflowID = (String)Dts.Variables["WorkflowID"].Value;
                string FilePath = (String)Dts.Variables["FilePath"].Value;
                string OrganisationID = (String)Dts.Variables["OrganisationID"].Value;
                string Url = (String)Dts.Variables["Url"].Value;
                string ClientId = (String)Dts.Variables["ClientId"].Value;
                string Client_Secret = (String)Dts.Variables["Client_Secret"].Value;
                string Resource = (String)Dts.Variables["Resource"].Value;
                string result;

                bool fireAgain = false;
                string logText = "WorkflowId: " + WorkflowID + "\nFilePath: " + FilePath + "\nOrganisationID: " + OrganisationID + "\nUrl:" + Url + "\nClientId:" + ClientId + "\nClient_Secret: #####\nResource:" + Resource;
                Dts.Events.FireInformation(3, "UDB Workflow", logText, "", 0, ref fireAgain);

                result = ExecuteSync.Execute(WorkflowID, FilePath, OrganisationID, Url, ClientId, Client_Secret, Resource);

                if (result.Substring(0,5) == "Error")
                {
                    throw new Exception(result);
                }
                else {
                    logText = "WorkflowId: " + WorkflowID + " was started successfully.\n" + result;
                    Dts.Events.FireInformation(3, "UDB Workflow", logText, "", 0, ref fireAgain);
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
                
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(100, "UDB Workflow", "UDB workflow execution error: " + ex.Message, "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_27d127eb28024801868919e2de9cf94e</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_27d127eb28024801868919e2de9cf94e</msb:DisplayName>
    <msb:ProjectId>{B4CFA2E8-1375-40E4-A62E-6D46A397870A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_27d127eb28024801868919e2de9cf94e.csproj" />
    <msb:File Include="UDB.Execute.cs" />
    <msb:File Include="UDB.ExecuteSync.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_27d127eb28024801868919e2de9cf94e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_27d127eb28024801868919e2de9cf94e")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="UDB.Execute.cs"
            Encoding="UTF8"><![CDATA[namespace Nhs.Scwcsu.UDB.Execute
{
    using System.Net.Http;
    using System.Net.Http.Headers;

    using System.Threading.Tasks;
    using System.IO;
    using System.Collections.Generic;
    using System;

    public static class ExecuteWorkflow
    {
        private static HttpClient _client;

        public static async Task<string> Execute(string workflowid, string filePath, string OrganisationId, string url, string clientId, string clientSecret, string resource)
        {
            if (string.IsNullOrWhiteSpace(workflowid))
            {
                throw new InvalidOperationException("No workflowId provided");
            }
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new InvalidOperationException("No filepath provided");
            }
            if (string.IsNullOrWhiteSpace(OrganisationId))
            {
                throw new InvalidOperationException("No organisationId provided");
            }
            if (string.IsNullOrWhiteSpace(url))
            {
                throw new InvalidOperationException("No url provided");
            }
            if (string.IsNullOrWhiteSpace(clientId))
            {
                throw new InvalidOperationException("No clientId provided");
            }
            if (string.IsNullOrWhiteSpace(clientSecret))
            {
                throw new InvalidOperationException("No clientSecret provided");
            }
            if (string.IsNullOrWhiteSpace(resource))
            {
                throw new InvalidOperationException("No resource provided");
            }
            _client = new HttpClient();
            var token = await AcquireToken(resource, clientId, clientSecret);
            return await UploadFile(filePath, workflowid, OrganisationId, token, url);
        }

        private static async Task<string> UploadFile(string filePath, string workflowId, string OrganisationId, string token, string url)
        {
            _client.DefaultRequestHeaders.Clear();
            var content = new MultipartFormDataContent();
            var fileName = Path.GetFileName(filePath);
            var reqContent = new StreamContent(new FileStream(filePath, FileMode.Open));
            var contentType = "";
            var Extension = fileName.Substring(fileName.LastIndexOf('.') + 1);
            switch (Extension)
            {
                case "csv":
                    contentType = "text/csv";
                    break;
                case "xls":
                    contentType = "application/vnd.ms-excel";
                    break;
                case "json":
                    contentType = "application/json";
                    break;
                case "zip":
                    contentType = "application/zip";
                    break;
                default:
                    contentType = "application/octet-stream";
                    break;
            }
            reqContent.Headers.ContentType = new MediaTypeHeaderValue(contentType);
            content.Add(reqContent, fileName, fileName);
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _client.PostAsync($"{url}/api/files/upload/{OrganisationId}/{workflowId}", content);
            var respContent = await response.Content.ReadAsStringAsync();
            return respContent;
        }

        private static async Task<string> AcquireToken(string url, string clientId, string clientSecret)
        {
            try
            {
                var content = new FormUrlEncodedContent(
                    new List<KeyValuePair<string, string>>()
                    {
                    new KeyValuePair<string, string>(
                        "grant_type", "client_credentials"
                    ),
                    new KeyValuePair<string, string>(
                        "client_id", clientId
                    ),
                    new KeyValuePair<string, string>(
                        "client_secret", clientSecret
                    ),
                    new KeyValuePair<string, string>(
                        "resource", url
                    )
                    }
                );

                content.Headers.Clear();
                content.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
                _client.DefaultRequestHeaders.Clear();
                var response = await _client.PostAsync(new Uri("https://login.microsoftonline.com/4088bef3-a7fb-4b63-b87b-4d8eda09b28d/oauth2/token?"), content);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    string _token = json.Substring(json.IndexOf("access_token") + 15);
                    var token = _token.Substring(0, _token.IndexOf("\""));
                    return token;
                }
                else
                {
                    throw new Exception($"Unabable to get a token: {response.ReasonPhrase}");
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_27d127eb28024801868919e2de9cf94e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_27d127eb28024801868919e2de9cf94e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_27d127eb28024801868919e2de9cf94e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_27d127eb28024801868919e2de9cf94e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_27d127eb28024801868919e2de9cf94e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_27d127eb28024801868919e2de9cf94e.dll">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
OgkAAAEAZwEAAAIApgUAAAMAGQEAAAQAVAYAAAUAKAEAAAYAOgkAAAcAuQEAAAEApgUAAAIAMQEA
AAMAGQEAAAQAkQYAAAUAVAYAAAEAVAYAAAIAKAEAAAMAOgkAAAEAaQUAAAEAigIAAAEAigIAAAEA
igIHAFEACABRAAkAUQAJAJMHAQARAJMHBgAZAJMHCgApAJMHEAAxAJMHEAA5AJMHEABBAJMHEABJ
AJMHEABRAJMHEABZAJMHEABhAJMHEACBAJMHFQCRAJMHBgChAOQJBgChAHoCGwDBAJMHBgDpAJMH
BgABAZMHBgAhAZMHIQAMACYDMwAMAN4JPAAMALMFSQAxAZYBagA5AZMHEABxAJMHBgBxAOkIhgBJ
AUMHBgDJAJMHBgBRATsCjABZAZMHkQDRAJMHmQAxAW8FoAAxAZwFpQAxAQoKqgBxAasIsACBAZMH
EAB5AaECtgDJADwBvQCJAZMHxgBBAdwGzAAxASwJ0wBxAA8B2QAUAH4H7QAcAGIJ/QDZAMIBAgHZ
AIkJBgFxAf0ADAEkAH4H7QAsAGIJ/QAxASwJIAE0AJMHBgA8AJMHTwE0ADwBVwHhAJMHXQFJATwB
xgCpAZMHEABxAA8BbQExAXMFfAExAZwFgQHZABUDhwGxAJMHEABpAJMHBgDxAAsJmgGxAWUIoAG5
AWMGpgHBATAFrQGxASEJsQHJAaIGtwExASwJwgGxAVMJAQCxAOMBhwHJAYkHygHxAJMHBgB5AB4C
0wF5AP0J2wEJAZMH4QEpAZMHBgAsAFcBAgEMAEAB9gEMABoHCwIMAGwJVwEMAHoCGwAcAFcBAgEI
AIQAhgIIAIgAiwIgAGMA8gMpAJsAWQMuAAsAMQMuABMAOgMuABsAWQMuACMAYgMuACsAiwMuADMA
iwMuADsAiwMuAEMAYgMuAEsAkQMuAFMAiwMuAFsAqANAAGMALARJAJsAWQNgAGMAaQSDAIsAiwKh
AGsAiwKjAJMAiwLjAGsAiwIDAWsAiwIjAWsAiwJAAoMAiwKAAoMAiwLAAoMAiwIoAFIAXABmAG8A
JgGLAekBEQI/AgUAAQAGAAMAAABaByADAADZAiYDAABLCSwDAgALAAMAAgAMAAUAAQANAAUAAgAO
AAcABwAiAB0ABwAkAB8ACAAmAB0ACAAoAB8ACQAqAB0ACQAsAB8ALQDmAPYAFAEaAToBRwEEgAAA
AQAAAJIhYXAAAAAAAAByAQAABAAAAAAAAAAAAAAAawLNAAAAAAAEAAAAAAAAAAAAAAB0AjMHAAAA
AA8AAAAAAAAAAAAAAH0CvAUAAAAABAAAAAAAAAAAAAAAawJsBgAAAAAPAAAAAAAAAAAAAAB9AqYA
AAAAAAAAAAABAAAA5AcAAAcAAgAIAAIACQACAAoABAArAEQAKwBXACsAYQCfAAECnwAqAp8ANQKf
AFYCnwBhAgAAADxFeGVjdXRlPmRfXzEAPD51X18xAElFbnVtZXJhYmxlYDEAVGFza2AxAEFzeW5j
VGFza01ldGhvZEJ1aWxkZXJgMQBUYXNrQXdhaXRlcmAxAExpc3RgMQA8VXBsb2FkRmlsZT5kX18y
ADw+dV9fMgBLZXlWYWx1ZVBhaXJgMgA8QWNxdWlyZVRva2VuPmRfXzMAPE1vZHVsZT4AU3lzdGVt
LklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29ybGliAFN5c3Rl
bS5Db2xsZWN0aW9ucy5HZW5lcmljAEV4ZWN1dGVTeW5jAFJlYWRBc1N0cmluZ0FzeW5jAFBvc3RB
c3luYwBPcmdhbmlzYXRpb25JZABjbGllbnRJZAB3b3JrZmxvd0lkAEFkZABBd2FpdFVuc2FmZU9u
Q29tcGxldGVkAGdldF9Jc0NvbXBsZXRlZAB3b3JrZmxvd2lkAFNUXzI3ZDEyN2ViMjgwMjQ4MDE4
Njg5MTllMmRlOWNmOTRlAElzTnVsbE9yV2hpdGVTcGFjZQBkZWZhdWx0SW5zdGFuY2UAcmVzb3Vy
Y2UAZ2V0X0lzU3VjY2Vzc1N0YXR1c0NvZGUARmlsZU1vZGUAZ2V0X01lc3NhZ2UASHR0cFJlc3Bv
bnNlTWVzc2FnZQBWYXJpYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBV
cGxvYWRGaWxlAEdldEZpbGVOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUASUFz
eW5jU3RhdGVNYWNoaW5lAFNldFN0YXRlTWFjaGluZQBzdGF0ZU1hY2hpbmUAVmFsdWVUeXBlAHNl
dF9Db250ZW50VHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
Z2V0X1JlYXNvblBocmFzZQBDcmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAPD4xX19zdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXN5bmNTdGF0ZU1hY2hpbmVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRy
aWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAERlYnVnZ2VySGlkZGVuQXR0cmlidXRlAEFz
c2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRl
AENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRl
AEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJp
YnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1
dGUATmhzLlNjd2NzdS5VREIuRXhlY3V0ZQBnZXRfVmFsdWUATWVkaWFUeXBlSGVhZGVyVmFsdWUA
QXV0aGVudGljYXRpb25IZWFkZXJWYWx1ZQB2YWx1ZQBMYXN0SW5kZXhPZgBTeXN0ZW0uUnVudGlt
ZS5WZXJzaW9uaW5nAFN0cmluZwBTdWJzdHJpbmcAZmlsZVBhdGgAVXJpAGdldF9UYXNrAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5T
Y3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF8yN2Qx
MjdlYjI4MDI0ODAxODY4OTE5ZTJkZTljZjk0ZS5kbGwAdXJsAEZpbGVTdHJlYW0AZ2V0X0l0ZW0A
U3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AQWNxdWlyZVRva2VuAHRva2VuAFNjcmlwdE1haW4ARmly
ZUluZm9ybWF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAHNl
dF9BdXRob3JpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRp
b24AU2V0RXhjZXB0aW9uAEN1bHR1cmVJbmZvAFN5c3RlbS5OZXQuSHR0cABDbGVhcgA8PnRfX2J1
aWxkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBFdmVudHNPYmplY3RXcmFwcGVyAEdldEF3YWl0ZXIA
RmlyZUVycm9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUu
Q29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzI3ZDEyN2ViMjgwMjQ4MDE4Njg5
MTllMmRlOWNmOTRlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2Rl
cwBTVF8yN2QxMjdlYjI4MDI0ODAxODY4OTE5ZTJkZTljZjk0ZS5Qcm9wZXJ0aWVzAGdldF9WYXJp
YWJsZXMAU2V0dGluZ3MAU3lzdGVtLlRocmVhZGluZy5UYXNrcwBTeXN0ZW0uTmV0Lkh0dHAuSGVh
ZGVycwBnZXRfSGVhZGVycwBIdHRwSGVhZGVycwBIdHRwQ29udGVudEhlYWRlcnMASHR0cFJlcXVl
c3RIZWFkZXJzAGdldF9EZWZhdWx0UmVxdWVzdEhlYWRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlw
dFJlc3VsdHMAZ2V0X0V2ZW50cwBDb25jYXQAT2JqZWN0AGNsaWVudFNlY3JldABnZXRfRGVmYXVs
dABzZXRfVGFza1Jlc3VsdABHZXRSZXN1bHQAU2V0UmVzdWx0AEh0dHBDbGllbnQAX2NsaWVudABn
ZXRfQ29udGVudABNdWx0aXBhcnRGb3JtRGF0YUNvbnRlbnQARm9ybVVybEVuY29kZWRDb250ZW50
AFN0cmVhbUNvbnRlbnQASHR0cENvbnRlbnQAU3RhcnQATW92ZU5leHQARXhlY3V0ZVdvcmtmbG93
AGdldF9Bc3NlbWJseQBvcF9FcXVhbGl0eQAAAAAtTgBvACAAdwBvAHIAawBmAGwAbwB3AEkAZAAg
AHAAcgBvAHYAaQBkAGUAZAAAKU4AbwAgAGYAaQBsAGUAcABhAHQAaAAgAHAAcgBvAHYAaQBkAGUA
ZAAANU4AbwAgAG8AcgBnAGEAbgBpAHMAYQB0AGkAbwBuAEkAZAAgAHAAcgBvAHYAaQBkAGUAZAAA
H04AbwAgAHUAcgBsACAAcAByAG8AdgBpAGQAZQBkAAApTgBvACAAYwBsAGkAZQBuAHQASQBkACAA
cAByAG8AdgBpAGQAZQBkAAAxTgBvACAAYwBsAGkAZQBuAHQAUwBlAGMAcgBlAHQAIABwAHIAbwB2
AGkAZABlAGQAAClOAG8AIAByAGUAcwBvAHUAcgBjAGUAIABwAHIAbwB2AGkAZABlAGQAAAEAB2MA
cwB2AAAHeABsAHMAAAlqAHMAbwBuAAAHegBpAHAAABF0AGUAeAB0AC8AYwBzAHYAADFhAHAAcABs
AGkAYwBhAHQAaQBvAG4ALwB2AG4AZAAuAG0AcwAtAGUAeABjAGUAbAABIWEAcABwAGwAaQBjAGEA
dABpAG8AbgAvAGoAcwBvAG4AAB9hAHAAcABsAGkAYwBhAHQAaQBvAG4ALwB6AGkAcAAAMWEAcABw
AGwAaQBjAGEAdABpAG8AbgAvAG8AYwB0AGUAdAAtAHMAdAByAGUAYQBtAAENQgBlAGEAcgBlAHIA
ACUvAGEAcABpAC8AZgBpAGwAZQBzAC8AdQBwAGwAbwBhAGQALwAAAy8AACdFAHIAcgBvAHIAIABw
AG8AcwB0AGkAbgBnACAAZgBpAGwAZQAgAAAVZwByAGEAbgB0AF8AdAB5AHAAZQAAJWMAbABpAGUA
bgB0AF8AYwByAGUAZABlAG4AdABpAGEAbABzAAATYwBsAGkAZQBuAHQAXwBpAGQAABtjAGwAaQBl
AG4AdABfAHMAZQBjAHIAZQB0AAARcgBlAHMAbwB1AHIAYwBlAAAZQwBvAG4AdABlAG4AdAAtAFQA
eQBwAGUAAUNhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwB4AC0AdwB3AHcALQBmAG8AcgBtAC0AdQBy
AGwAZQBuAGMAbwBkAGUAZAABgKloAHQAdABwAHMAOgAvAC8AbABvAGcAaQBuAC4AbQBpAGMAcgBv
AHMAbwBmAHQAbwBuAGwAaQBuAGUALgBjAG8AbQAvADQAMAA4ADgAYgBlAGYAMwAtAGEANwBmAGIA
LQA0AGIANgAzAC0AYgA4ADcAYgAtADQAZAA4AGUAZABhADAAOQBiADIAOABkAC8AbwBhAHUAdABo
ADIALwB0AG8AawBlAG4APwABGWEAYwBjAGUAcwBzAF8AdABvAGsAZQBuAAADIgAAM1UAbgBhAGIA
YQBiAGwAZQAgAHQAbwAgAGcAZQB0ACAAYQAgAHQAbwBrAGUAbgA6ACAAABVXAG8AcgBrAGYAbABv
AHcASQBEAAARRgBpAGwAZQBQAGEAdABoAAAdTwByAGcAYQBuAGkAcwBhAHQAaQBvAG4ASQBEAAAH
VQByAGwAABFDAGwAaQBlAG4AdABJAGQAABtDAGwAaQBlAG4AdABfAFMAZQBjAHIAZQB0AAARUgBl
AHMAbwB1AHIAYwBlAAAZVwBvAHIAawBmAGwAbwB3AEkAZAA6ACAAABcKAEYAaQBsAGUAUABhAHQA
aAA6ACAAACMKAE8AcgBnAGEAbgBpAHMAYQB0AGkAbwBuAEkARAA6ACAAAAsKAFUAcgBsADoAABUK
AEMAbABpAGUAbgB0AEkAZAA6AAA/CgBDAGwAaQBlAG4AdABfAFMAZQBjAHIAZQB0ADoAIAAjACMA
IwAjACMACgBSAGUAcwBvAHUAcgBjAGUAOgAAGVUARABCACAAVwBvAHIAawBmAGwAbwB3AAALRQBy
AHIAbwByAAA3IAB3AGEAcwAgAHMAdABhAHIAdABlAGQAIABzAHUAYwBjAGUAcwBzAGYAdQBsAGwA
eQAuAAoAAD1VAEQAQgAgAHcAbwByAGsAZgBsAG8AdwAgAGUAeABlAGMAdQB0AGkAbwBuACAAZQBy
AHIAbwByADoAIAAAcVMAVABfADIANwBkADEAMgA3AGUAYgAyADgAMAAyADQAOAAwADEAOAA2ADgA
OQAxADkAZQAyAGQAZQA5AGMAZgA5ADQAZQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBv
AHUAcgBjAGUAcwAAAADgKNVYqmpzR7bg0cFkEN8+AAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARI9
BSABARJRBiABARGAjQQHAREcBRURXQEOCAAAFRFdARMABzABAQEQHgAECgERHAggABUSRQETAAQH
AREgBAoBESAEBwERJAQKAREkAwcBDgQAAQIOFgcIEmUOEmkODhJtFRFVARJtFRFVAQ4FIAASgKEE
AAEODgcgAgEOEYCxBiABARKAtQQgAQgDBCABDggFAAICDg4FIAASgL0GIAEBEoDBCCADARKAuQ4O
BSACAQ4OBiABARKAxQUAAQ4dDgwgAhUSRQESbQ4SgLkGFRJFARJtCCAAFRFVARMABhURVQESbQQg
ABMAAyAAAgUgABKAuQcgABUSRQEOBRUSRQEOBRURVQEOBQACDg4OEwcGEnESbRURVQESbQ4VEVUB
Dg4MFRKAyQEVEYDNAg4OBxURgM0CDg4HIAIBEwATAQUgAQETAA8gAQEVEoDRARURgM0CDg4OIAIV
EkUBEm0SgNUSgLkEIAEIDgUgAg4ICAMgAA4OBwsODg4ODg4ODgIOElkFIAASgNkFIAASgN0GIAES
gOEcAyAAHAUgABKA5QogBgEIDg4OCBACBwAEDg4ODg4IIAUCCA4ODggHAAESPRGA6QUgABKA7Qcg
AgEOEoDtDAcFCA4OFRFVAQ4SWQowAgIBEB4AEB4BCQoCFRFVAQ4RHAUgAQESWRgHCggOEmUOEmkO
DhURVQESbRURVQEOElkKCgIVEVUBEm0RIAkKAhURVQEOESAWBwgIDhJxEm0VEVUBEm0OFRFVAQ4S
WQoKAhURVQESbREkCQoCFRFVAQ4RJAi3elxWGTTgiQiwP19/EdUKOgiJhF3NgIDMkQQAAAAABAEA
AAADBhI5BAYSgIUEBhKAiQMGEhgCBggGBhURXQEOAgYOBgYVEVUBDgcGFRFVARJtAwYRKA4ABxUS
RQEODg4ODg4ODgwABRUSRQEODg4ODg4KAAMVEkUBDg4ODgoABw4ODg4ODg4OCAAFDg4ODg4OBgAD
Dg4ODgUAABKAhQUAABKAiQYAAQESgIkEAAASGAMAAAEFCAASgIUFCAASgIkECAASGAgBAAgAAAAA
AB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMjdkMTI3ZWIy
ODAyNDgwMTg2ODkxOWUyZGU5Y2Y5NGUAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMwAASQEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVU
IEZyYW1ld29yayA0Ljc5AQA0TmhzLlNjd2NzdS5VREIuRXhlY3V0ZS5FeGVjdXRlV29ya2Zsb3cr
PEV4ZWN1dGU+ZF9fMQAAPAEAN05ocy5TY3djc3UuVURCLkV4ZWN1dGUuRXhlY3V0ZVdvcmtmbG93
KzxVcGxvYWRGaWxlPmRfXzIAAD4BADlOaHMuU2N3Y3N1LlVEQi5FeGVjdXRlLkV4ZWN1dGVXb3Jr
Zmxvdys8QWNxdWlyZVRva2VuPmRfXzMAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNl
cy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0
cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVu
dGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAD0TQAAAAAAAAAAAAAOTgAAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4AAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRs
bAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAA
AAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAA
AAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAB
AGFwkiEAAAEAYXCSIT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAAB
AFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoA
AQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAA
AAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMgA3AGQA
MQAyADcAZQBiADIAOAAwADIANAA4ADAAMQA4ADYAOAA5ADEAOQBlADIAZABlADkAYwBmADkANABl
AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgANQA5ADQALgAyADgA
NwA2ADkAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMgA3AGQAMQAy
ADcAZQBiADIAOAAwADIANAA4ADAAMQA4ADYAOAA5ADEAOQBlADIAZABlADkAYwBmADkANABlAC4A
ZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBn
AGgAdAAgAEAAIAAgADIAMAAyADMAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsA
cwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAy
ADcAZAAxADIANwBlAGIAMgA4ADAAMgA0ADgAMAAxADgANgA4ADkAMQA5AGUAMgBkAGUAOQBjAGYA
OQA0AGUALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgA3
AGQAMQAyADcAZQBiADIAOAAwADIANAA4ADAAMQA4ADYAOAA5ADEAOQBlADIAZABlADkAYwBmADkA
NABlAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADUAOQA0
AC4AMgA4ADcANgA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAA
MQAuADAALgA4ADUAOQA0AC4AMgA4ADcANgA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAACA+AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{28A6DD68-2166-4624-BD06-2E8EB11B23BC}"
      DTS:EventID="0"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{81B65F8B-3717-4F68-A84E-AFE1BD16812F}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables />
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="52.5,57.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="258,42"
          Id="{C79B4858-2FCB-4BB4-A7CA-D974E2EAD9AF}"
          TopLeft="172,48" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>